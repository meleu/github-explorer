{"version":3,"sources":["assets/github-background.svg","styles/globals.ts","assets/logo.svg","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","newRepo","setNewRepo","inputError","setInputError","storedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","e","a","preventDefault","get","response","repository","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","target","placeholder","type","map","to","full_name","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","Issues","Repository","setRepository","issues","setIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","href","html_url","title","user","id","Routes","path","exact","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70fbf616.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/github-background.7fa45dda.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background: #f0f0f5 url(${githubBackground}) no-repeat 70% top;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/logo.469cc31b.svg\";","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  max-width: 450px;\n  line-height: 56px;\n  margin-top: 80px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0 0 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n    border-right: 0;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background: #04d361;\n    border-radius: 0 5px 5px 0;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background: ${shade(0.2, '#04d361')};\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    /* display: block; */\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\n\nimport logoImg from '../../assets/logo.svg';\nimport api from '../../services/api';\n\nimport { Title, Form, Error, Repositories } from './styles';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [newRepo, setNewRepo] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storedRepositories = localStorage.getItem(\n      '@GithubExplorer:repositories'\n    );\n\n    if (storedRepositories) {\n      return JSON.parse(storedRepositories);\n    }\n\n    return [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GithubExplorer:repositories',\n      JSON.stringify(repositories)\n    );\n  }, [repositories]);\n\n  async function handleAddRepository(\n    e: FormEvent<HTMLFormElement>\n  ): Promise<void> {\n    e.preventDefault();\n\n    if (!newRepo) {\n      setInputError('Digite o autor/nome do reposit贸rio');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`repos/${newRepo}`);\n      const repository = response.data;\n\n      setRepositories([...repositories, repository]);\n      setNewRepo('');\n      setInputError('');\n    } catch {\n      setInputError('Erro na busca por esse reposit贸rio');\n    }\n  }\n  return (\n    <>\n      <img src={logoImg} alt=\"GitHub Explorer\" />\n      <Title>Explore reposit贸rios no GitHub</Title>\n\n      <Form hasError={!!inputError} onSubmit={handleAddRepository}>\n        <input\n          value={newRepo}\n          onChange={e => setNewRepo(e.target.value)}\n          placeholder=\"Digite o nome do reposit贸rio\"\n        />\n        <button type=\"submit\">Pesquisar</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {repositories.map(repository => (\n          <Link\n            key={repository.full_name}\n            to={`/repositories/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 24px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n      }\n    }\n  }\n`;\n\nexport const Issues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    text-decoration: none;\n\n    display: flex;\n    align-items: center;\n    transition: transform 0.2s;\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    &:hover {\n      transform: translateX(10px);\n    }\n\n    div {\n      margin: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\n\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Header, RepositoryInfo, Issues } from './styles';\n\ninterface RepositoryParams {\n  repository: string;\n}\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface Issue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [issues, setIssues] = useState<Issue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then(response => {\n      setRepository(response.data);\n    });\n\n    api.get(`repos/${params.repository}/issues`).then(response => {\n      setIssues(response.data);\n    });\n  }, [params.repository]);\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"GitHub Explorer\" />\n        <Link to=\"/\">\n          <FiChevronLeft size={16} />\n          Voltar\n        </Link>\n      </Header>\n\n      {repository && (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>Stars</span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>Forks</span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>Issues abertas</span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      )}\n\n      <Issues>\n        {issues.map(issue => (\n          <a key={issue.id} href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </Issues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Dashboard} />\n      <Route path=\"/repositories/:repository+\" exact component={Repository} />\n    </Switch>\n  );\n};\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport GlobalStyle from './styles/globals';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter>\n      <Routes />\n    </BrowserRouter>\n    <GlobalStyle />\n  </>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}